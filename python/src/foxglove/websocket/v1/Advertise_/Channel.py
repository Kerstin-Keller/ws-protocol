# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Advertise_

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Channel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Channel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChannel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Channel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Channel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Channel
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel
    def Encoding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel
    def SchemaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel
    def Schema(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Channel
    def SchemaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Channel
    def SchemaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Channel
    def SchemaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def Start(builder): builder.StartObject(5)
def ChannelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def ChannelAddId(builder, id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, id)
def AddTopic(builder, topic): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)
def ChannelAddTopic(builder, topic):
    """This method is deprecated. Please switch to AddTopic."""
    return AddTopic(builder, topic)
def AddEncoding(builder, encoding): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(encoding), 0)
def ChannelAddEncoding(builder, encoding):
    """This method is deprecated. Please switch to AddEncoding."""
    return AddEncoding(builder, encoding)
def AddSchemaName(builder, schemaName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(schemaName), 0)
def ChannelAddSchemaName(builder, schemaName):
    """This method is deprecated. Please switch to AddSchemaName."""
    return AddSchemaName(builder, schemaName)
def AddSchema(builder, schema): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(schema), 0)
def ChannelAddSchema(builder, schema):
    """This method is deprecated. Please switch to AddSchema."""
    return AddSchema(builder, schema)
def StartSchemaVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ChannelStartSchemaVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSchemaVector(builder, numElems)
def End(builder): return builder.EndObject()
def ChannelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)