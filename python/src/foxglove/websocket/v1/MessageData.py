# automatically generated by the FlatBuffers compiler, do not modify

# namespace: v1

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MessageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MessageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MessageData
    def SubscriptionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MessageData
    def ReceiveTimestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MessageData
    def Payload(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MessageData
    def PayloadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # MessageData
    def PayloadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MessageData
    def PayloadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def MessageDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSubscriptionId(builder, subscriptionId): builder.PrependUint32Slot(0, subscriptionId, 0)
def MessageDataAddSubscriptionId(builder, subscriptionId):
    """This method is deprecated. Please switch to AddSubscriptionId."""
    return AddSubscriptionId(builder, subscriptionId)
def AddReceiveTimestamp(builder, receiveTimestamp): builder.PrependUint64Slot(1, receiveTimestamp, 0)
def MessageDataAddReceiveTimestamp(builder, receiveTimestamp):
    """This method is deprecated. Please switch to AddReceiveTimestamp."""
    return AddReceiveTimestamp(builder, receiveTimestamp)
def AddPayload(builder, payload): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)
def MessageDataAddPayload(builder, payload):
    """This method is deprecated. Please switch to AddPayload."""
    return AddPayload(builder, payload)
def StartPayloadVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def MessageDataStartPayloadVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPayloadVector(builder, numElems)
def End(builder): return builder.EndObject()
def MessageDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)